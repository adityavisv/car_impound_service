openapi: 3.0.3
info:
  title: Sharjah Car Impound API - OpenAPI 3.0
  description: |-
    REST API Definition for the Sharjah Car Impound Service.
  termsOfService: http://swagger.io/terms/
  contact:
    email: abc@xyz.com
  version: 0.1.0
tags:
  - name: vehicle
    description: All services about vehicles
paths:
  /api/v1/vehicle:
    put:
      tags:
        - vehicle
      summary: Update an existing vehicle
      description: Update an existing vehicle by Id
      operationId: updateVehicle
      parameters:
        - name: id
          in: query
          description: ID of the vehicle which needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent vehicle in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '400':
          description: Invalid ID supplied
        '404':
          description: Vehicle not found
        '405':
          description: Validation exception
    post:
      tags:
        - vehicle
      summary: Add a new vehicle to the impound lot
      description: Add a new vehicle to the impound lot
      operationId: addVehicle
      requestBody:
        description: Create a new vehicle in the impound lot
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehiclePost'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'          
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    get:
      tags:
        - vehicle
      summary: Retrieve vehicle data by vehicle ID
      description: Retrieves complete vehicle data based on matching vehicle ID
      operationId: retrieveVehicle
      parameters:
        - name: id
          in: query
          description: Vehicle ID to retrieve information based on
          required: true
          schema:
            type: string
            default: available
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '400':
          description: Invalid vehicle ID
        '404':
          description: Vehicle not found
  /api/v1/zone:
    get:
      tags:
        - zone
      summary: Retrieves all parking slots in a zone
      operationId: retrieveZone
      parameters:
        - name: zone
          in: query
          description: Label of the zone to retrieve
          required: false
          schema:
            type: string
            default: 'A'
        - name: occupiedStatus
          in: query
          description: Occupancy Status of parking spots to filter by
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingSpotList'
        '400':
          description: Invalid Zone Label
  /api/v1/zone/parkingSpot:
    get:
      tags:
        - vehicle
      summary: Retrieves single parking spot details
      description: Fetches all information about a parking spot based on zone and slot number
      parameters:
        - name: zone
          in: query
          description: Zone of the parking spot to look up
          required: true
          schema:
            type: string
        - name: slotNumber
          in: query
          description: Slot Number of the parking spot to look up.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingSpot'
  /api/v1/zone/summary:
    get:
      tags:
        - vehicle
      summary: Retrieves summaries of zone(s) based on filters (if applicable)
      parameters:
        - name: zone
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingZoneListSummary'
  /api/v1/zone/assign:
    put:
      tags:
        - vehicle
      summary: Assigns a car to a parking slot
      parameters:
        - name: zone
          in: query
          required: true
          schema:
            type: string
        - name: slotNumber
          in: query
          required: true
          schema:
            type: integer
      requestBody:
        description: Vehicle Data which is to be assigned
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehiclePost'
        required: true
  /api/v1/zone/release:
    put:
      tags:
        - vehicle
      summary: Releases car from a given parking spot
      parameters:
        - name: zone
          in: query
          required: true
          schema:
            type: string
        - name: slotNumber
          in: query
          required: true
          schema:
            type: integer

  /api/v1/search:
    get:
      tags:
        - vehicle
      summary: Search vehicle from impound lot database
      description: Searches all vehicle data throught the database based on a search keyword.
      operationId: searchVehicle
      parameters:
        - name: keyword
          in: query
          description: Key phrase to search by
          required: true
          schema:
            type: string
            default: available
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicles'
        '400':
          description: Invalid search phrase

components:
  schemas:
    ParkingZoneSummary:
      type: object
      properties:
        zoneLabel:
          type: string
        totalCapacity:
          type: integer
        availableCount:
          type: integer
        occupiedCount:
          type: integer
    ParkingZoneListSummary:
      type: object
      properties:
        zoneSummaries:
          type: array
          items:
            $ref: '#/components/schemas/ParkingZoneSummary'
    ParkingSpot:
      type: object
      properties:
        id:
          type: integer
        zoneLabel:
          type: string
        slotNumber:
          type: integer
        occupancyStatus:
          type: string
          enum: ["Occupied", "Available"]
        occupiedVehicle:
          $ref: '#/components/schemas/ParkingSpot'

    ParkingSpotList:
      type: object
      properties:
        parkingSpots:
          type: array
          items:
            $ref: '#/components/schemas/ParkingSpot'

    Vehicles:
      type: object
      properties:
        vehicles:
          type: array
          items:
            $ref: '#/components/schemas/Vehicle'

    Owner:
      type: object
      properties:
        idType:
          type: string
          enum: ["Passport", "Emirates ID", "National ID", "Driving License"]
        firstName:
          type: string
        lastName:
          type: string
        emailAddress:
          type: string
          format: email
        idNumber:
          type: string
        contactNumber:
          type: string

    Vehicle:
      type: object
      properties:
        id:
          type: string
        make:
          type: string
        model:
          type: string
        registrationDateTime:
          type: string
          format: date-time
        caseNumber:
          type: integer
          format: int64
        mulkiaNumber:
          type: integer
          format: int64
        color:
          type: string
        parkingSlot:
          type: string
        isCaseInCourt:
          type: boolean
        isCarToBeAuctioned:
          type: boolean
        numberPlate:
          type: string
        owner:
          $ref: '#/components/schemas/Owner'
  
    VehiclePost:
      type: object
      required:
        - make
        - model
        - caseNumber
        - mulkiaNumber
        - registrationDateTime
        - department
        - color
        - parkingSlot
      properties:
        id:
          type: string
        make:
          type: string
        model:
          type: string
        registrationDateTime:
          type: string
          format: date-time
        caseNumber:
          type: integer
          format: int64
        mulkiaNumber:
          type: integer
          format: int64
        color:
          type: string
        parkingSlot:
          type: string
        isCaseInCourt:
          type: boolean
        isCarToBeAuctioned:
          type: boolean
        numberPlate:
          type: string
        department:
          type: string
        owner:
          $ref: '#/components/schemas/Owner'   
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header